{% comment %} This file is auto-generated. Do not edit this file. {% endcomment %}
{% comment %} This file is auto-generated. Do not edit this file. {% endcomment %}
<style>
  .mm-feat-atc{
      position: fixed;
      bottom: 0;
      width:100%;
      background-color: {{ section.settings.bg_color }};
      --text-color: {{ section.settings.text_color }};
      z-index: 999999;
      transition: transform 0.5s ease, opacity 0.5s ease;
      transform: translateY(100%);
      opacity: 0;
      padding-left: 22px;
      padding-right: 22px;
  }
  .active.mm-feat-atc{
      transform: translateY(0);
      opacity: 1;
  }
  .mm-feat-atc .mm-feat-atc__inner{
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px;
      max-width: 1280px;
      margin: auto;
  }
  .mm-feat-atc .mm-feat-atc__product{
      flex-basis: 480px;
      display: flex;
      gap: 12px;
      align-items: center;
  }
  .mm-feat-atc .mm-feat-atc__product__img{
      max-width:60px;
      line-height: 1;
  }
  .mm-feat-atc .mm-feat-atc__product__img img{
      width: 100%;
      border-radius: {{ section.settings.product_img_radius }}px;
      border: 2px solid {{ section.settings.product_img_outline_color }};
      height: auto;
  }
  .mm-feat-atc .mm-feat-atc__product__info h3{
      margin: 0 0 6px;
      font-size: 16px;
      font-weight: 700;
  }
  .mm-feat-atc .mm-feat-atc__product__info h3 span{
      display: block;
      font-size: 12px;
      font-weight: 600;
      color: #868e96;
  }
  .mm-feat-atc .mm-feat-atc__price--inner{
      display: flex;
      flex-direction: row-reverse;
      justify-content: flex-end;
  }
  .mm-feat-atc .mm-feat-atc__price--inner p{
      font-size: 14px;
      margin: 0;
      line-height: 1.2;
  }
  .mm-feat-atc .mm-feat-atc__variants{
      flex: 1;
      flex-basis: 200px;
  }
  .mm-feat-atc .mm-feat-atc__variants-container{
      display: flex;
      align-items: stretch;
      flex-direction: column;
      flex-grow: 1;
      position: relative;
      min-width: 90px;
      cursor: pointer;
  }
  .mm-feat-atc .mm-feat-atc__variants-container label{
      position: absolute;
      top: 0;
      left: 5px;
      font-size: 12px;
      text-transform: uppercase;
      font-weight: 500;
      color: #adb5bd;
  }
  .mm-feat-atc .mm-feat-atc__variants-container select{
      font-size: 14px;
      line-height: 1.2;
      padding: 22px 6px 6px 6px;
      outline: none;
      box-shadow: none;
      appearance: none;
      -webkit-appearance: none;
      -moz-appearance: none;
      border-radius: 4px;
      border: 1px solid rgb(209 213 219);
      cursor: pointer;
  }
  .mm-feat-atc .mm-feat-atc__cta-section{
      display: flex;
      align-items: center;
      flex-basis: 420px;
      padding: 6px;
  }
  .mm-feat-atc .add-to-cart-form{
      display: flex;
      align-items: stretch;
      flex-grow: 1;
  }
  .mm-feat-atc .mm-feat-atc__form__quantity{
      display: flex;
      align-items: stretch;
      margin-left: 16px;
      margin-right: 16px;
      cursor: pointer;
      border: 1px solid rgb(209 213 219);
      border-radius: 4px;
      padding: 0 2px;
  }
  .mm-feat-atc .mm-feat-atc__form__quantity input{
      text-align: center;
      padding: 12px 0;
      width: 60px;
      font-size: 14px;
      margin: 0;
      line-height: 1;
      -moz-appearance: textfield;
      -webkit-appearance: none;
      outline: none;
      box-shadow: none;
      border: 1px solid rgb(209 213 219);
  }
  .mm-feat-atc input[type="number"]::-webkit-inner-spin-button,
  .mm-feat-atc input[type="number"]::-webkit-outer-spin-button {
      -webkit-appearance: none;
      margin: 0;
  }
  .mm-feat-atc .mm-feat-atc__form__quantity button{
      background: white;
      border: none;
      width: 28px;
      cursor: pointer;
  }
  .mm-feat-atc .mm-feat-atc__form__btn,.mm-feat-atc .cart__checkout-button{
      width: 100%;
      background: {{ section.settings.btn_bg_color }};
      color: {{ section.settings.btn_text_color }};
      border-radius: {{ section.settings.btn_border_radius }}px;
      border: 2px solid {{ section.settings.button-border-color }};
      font-size: 14px;
      line-height: 1;
      cursor: pointer;
  }
  .mm-feat-atc .cart__checkout-button svg{
      margin-left: 8px;
  }
  .mm-feat-atc button:before, .mm-feat-atc button:after{
      content: unset;
  }
  .mm-feat-atc .mm-feat-atc__form__btn:hover{
      background: {{ section.settings.btn_hover_bg_color }};
      color: {{ section.settings.btn_hover_text_color }};
  }
  .mm-feat-atc .back-to-top-btn{
      border: none;
      background: no-repeat;
      position: absolute;
      top: -50%;
      right: 26px;
      font-size: 14px;
      line-height: 1;
      cursor: pointer;
      background: white;
      padding: 8px;
      border-radius: 6px 6px 0 0;
      color: #868e96;
  }
  .mm-feat-atc .back-to-top-btn svg{
      width: 14px;
      display: block;
      margin: auto auto 4px;
  }
  @media screen and (max-width: 991px){
      .mm-feat-atc .mm-feat-atc__inner{
          flex-wrap: wrap;
          row-gap: 8px;
      }
      .mm-feat-atc .mm-feat-atc__cta-section{
          flex-basis: 100%;
      }
      .mm-feat-atc .back-to-top-btn{
          top: -38%;
      }
  }
  @media screen and (max-width: 749px){
      .mm-feat-atc{
          padding: 0;
      }
      .mm-feat-atc .mm-feat-atc__form__quantity{
          margin-left: 0;
      }
      .mm-feat-atc .mm-feat-atc__product__info h3{
          font-size: 14px;
      }
      .mm-feat-atc .mm-feat-atc__product__info{
          max-width: calc(80% - 40px);
      }
      .mm-feat-atc .back-to-top-btn{
          top: 0px;
          right: 10px;
          max-width: 40px;
          line-height: 1.3;
          text-transform: uppercase;
          font-size: 10px;
          padding: 8px 0;
      }
  }
</style>
<div class='mm-feat-atc mm-atc{% unless section.settings.atc_after_main %} active{% endunless %}'>
  <div class='mm-feat-atc__inner'>
    <div class='mm-feat-atc__product'>
      <div class='mm-feat-atc__product__img'>
        {% liquid
          if product.selected_or_first_available_variant.featured_image
            assign featured_image = product.selected_or_first_available_variant.featured_image
          else
            assign featured_image = product.featured_image
          endif
        %}
        <img src='{{ featured_image.src | img_url: '600x600' }}' alt='{{ product.featured_image.alt }}'>
      </div>
      <div class='mm-feat-atc__product__info'>
        <h3>
          {% if section.settings.break_title %}
            {% assign broken_title = product.title | split: '|' %}
            {{ broken_title[0] }}
            <span>{{ broken_title[1] }}</span>
          {% else %}
            {{ product.title }}
          {% endif %}
        </h3>
        <div class='mm-feat-atc__price--container' data-currency-code='{{ cart.currency.symbol }}'>
          <div class='mm-feat-atc__price--inner'>
            <p class='mm-feat-atc__price'>{{ product.selected_or_first_available_variant.price | money }}</p>
            <p class='mm-feat-atc__compare--price {% unless product.selected_or_first_available_variant.compare_at_price > product.selected_or_first_available_variant.price %}hidden{% endunless %}'>
              {{ product.selected_or_first_available_variant.compare_at_price | money }}
            </p>
          </div>
        </div>
      </div>
    </div>
    <div class='mm-feat-atc__variants'>
      <div class='mm-feat-atc__variants-container'>
        {% for option in product.options_with_values %}
          <label for='option-{{ forloop.index0 }}'>{{ option.name }}</label>
          <select id='option-{{ forloop.index0 }}' name='options[{{ option.name }}]'>
            {% for value in option.values %}
              <option value='{{ value | escape }}' data-variant-id='{{ value.id }}'>{{ value }}</option>
            {% endfor %}
          </select>
        {% endfor %}
      </div>
      <script type='application/json'>
        {{ product.variants | json }}
      </script>
    </div>
    <div class='mm-feat-atc__cta-section'>
      {%- assign product_form_id = 'product-form-' | append: section.id -%}
      {%- form 'product',
        product,
        id: product_form_id,
        class: 'add-to-cart-form',
        novalidate: 'novalidate',
        data-type: 'add-to-cart-form'
      -%}
        <input type='hidden' name='id' value='{{ product.variants.first.id }}'>
        <div class='mm-feat-atc__form__quantity'>
          <button class='mm-feat-atc__form__quantity-minus mm-feat-quantity-action' data-action='minus'>-</button>
          <input type='number' id='quantity' name='quantity' value='1' min='1'>
          <button class='mm-feat-atc__form__quantity-plus mm-feat-quantity-action' data-action='plus'>+</button>
        </div>
        <button type='submit' class='mm-feat-atc__form__btn'>
          <span>
            {{ section.settings['button-atc-text'] }}
          </span>
          <div class='loading-overlay__spinner hidden'>
            <svg
              aria-hidden='true'
              focusable='false'
              class='spinner'
              viewBox='0 0 66 66'
              xmlns='http://www.w3.org/2000/svg'
            >
              <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
            </svg>
          </div>
        </button>
        {% if section.settings.atc_to_checkout %}
          <button
            type='submit'
            id='CartDrawer-Checkout'
            class='cart__checkout-button button hidden'
            name='checkout'
            form='CartDrawer-Form'
          >
            {{ 'sections.cart.checkout' | t }}
            <svg xmlns='http://www.w3.org/2000/svg' width='12' height='14' viewBox='0 0 12 14' fill='none'>
              <path d="M10.2375 5.9338V2.91667C10.2375 1.30861 8.9616 0 7.39375 0H3.98125C2.4134 0 1.1375 1.30861 1.1375 2.91667V5.9338C0.475222 6.17426 0 6.82306 0 7.58333V11.0833C0 12.6914 1.2759 14 2.84375 14H8.53125C10.0991 14 11.375 12.6914 11.375 11.0833V7.58333C11.375 6.82306 10.8998 6.17426 10.2375 5.9338ZM3.98125 1.16667H7.39375C8.33472 1.16667 9.1 1.95157 9.1 2.91667V5.83333H2.275V2.91667C2.275 1.95157 3.04028 1.16667 3.98125 1.16667ZM10.2375 11.0833C10.2375 12.0484 9.47222 12.8333 8.53125 12.8333H2.84375C1.90278 12.8333 1.1375 12.0484 1.1375 11.0833V7.58333C1.1375 7.26185 1.39281 7 1.70625 7H9.66875C9.98219 7 10.2375 7.26185 10.2375 7.58333V11.0833Z" fill="#002169"/>
              <path d="M5.6875 9.625C5.4459 9.625 5.25 9.8209 5.25 10.0625V10.9375C5.25 11.1791 5.4459 11.375 5.6875 11.375C5.9291 11.375 6.125 11.1791 6.125 10.9375V10.0625C6.125 9.8209 5.9291 9.625 5.6875 9.625Z" fill="#002169"/>
            </svg>
          </button>
        {% endif %}
      {%- endform -%}
    </div>
  </div>
  <button id='backToTopBtn' class='back-to-top-btn'>
    <svg xmlns='http://www.w3.org/2000/svg' class='ionicon' viewBox='0 0 512 512'>
      <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="48" d="M112 328l144-144 144 144"/>
    </svg>
    Back to Top
  </button>
</div>

<script>
    const mmAtcWrapper = document.querySelector('.mm-atc');
    const mmSelectBox = mmAtcWrapper.querySelectorAll('select');
    const mmVariantsData = JSON.parse(mmAtcWrapper.querySelector('script[type="application/json"]').textContent);
    const atcFeatureImg = mmAtcWrapper.querySelector('.mm-feat-atc__product__img img');
    const atcProductInput = mmAtcWrapper.querySelector('input[name="id"]');
    const mainRefSection = document.querySelector('{{ section.settings.main_section_id }}')
    mmSelectBox.forEach(select => select.addEventListener('change', updateVaraintChange));

    function updateVaraintChange(){
        const options = Array.from(mmAtcWrapper.querySelectorAll('select'), (select) => select.value);
        const selectedVariant = mmVariantsData.find((variant) => {
            return !variant.options
              .map((option, index) => {
                return options[index] === option;
              })
              .includes(false);
          });
        if (selectedVariant) {
            atcFeatureImg.src = selectedVariant.featured_image.src;
            atcProductInput.value = selectedVariant.id;
            updateVariantPricing(selectedVariant);
         } else {
            console.log('Variant not found');
        }
    }

    function updateVariantPricing(selectedVariant){
        const priceContainer = mmAtcWrapper.querySelector('.mm-feat-atc__price--container');
        const price = priceContainer.querySelector('.mm-feat-atc__price');
        const comparePrice = priceContainer.querySelector('.mm-feat-atc__compare--price');

        const currencyCode = priceContainer.getAttribute('data-currency-code');

        price.textContent =`${currencyCode}${(Number(selectedVariant.price) / 100).toLocaleString()}`
        if(selectedVariant.compare_at_price > selectedVariant.price){
            comparePrice.classList.remove('hidden');
            comparePrice.textContent = `${currencyCode}${(Number(selectedVariant.compare_at_price) / 100).toLocaleString()}`
        }else{
            comparePrice.classList.add('hidden');
            comparePrice.textContent = '';
        }
    }

    const quantityWrapper = mmAtcWrapper.querySelector('.mm-feat-atc__form__quantity');
    const quantityActionButtons = mmAtcWrapper.querySelectorAll('.mm-feat-quantity-action');
    const quantityInput = quantityWrapper.querySelector('input');
    quantityActionButtons.forEach(button => button.addEventListener('click', updateQuantity));

    function updateQuantity(e){
        e.preventDefault();
        const action = e.target.getAttribute('data-action');
        const quantity = Number(quantityInput.value);
        if(action === 'plus'){
            quantityInput.value = quantity + 1;
        }else if(action === 'minus'){
            if(quantity > 1){
                quantityInput.value = quantity - 1;
            }
        }
    }

    const atcActionButton = mmAtcWrapper.querySelector('.mm-feat-atc__form__btn');
    {% unless section.settings.atc_scroll_to_main %}
        atcActionButton.addEventListener('click', addToCart);
    {% endunless %}

    function addToCart(e){
        e.preventDefault();
        atcActionButton.querySelector('.loading-overlay__spinner').classList.remove('hidden');
        atcActionButton.querySelector('span').classList.add('hidden');
        const form = e.target.closest('form');
        let cart = document.querySelector('cart-drawer');
        let formData = new FormData(form);

        if (cart) {
            formData.append(
            'sections',
                cart.getSectionsToRender().map((section) => section.id)
            );
            formData.append('sections_url', window.location.pathname);
            cart.setActiveElement(document.activeElement);
      }
        fetch(window.Shopify.routes.root + 'cart/add.js', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            return response.json();
        })
        .then(response => {
            atcActionButton.querySelector('.loading-overlay__spinner').classList.add('hidden');
            const checkoutBtn = mmAtcWrapper.querySelector('.cart__checkout-button')
            if(checkoutBtn){
                checkoutBtn.classList.remove('hidden');
                atcActionButton.classList.add('hidden');
            }else{
                atcActionButton.querySelector('span').classList.remove('hidden');
            }
            cart.renderContents(response);
            cart.classList.remove('is-empty');
        })
        .catch((error) => {
            console.error('Error:', error);
        });
    }
    {% if section.settings.atc_after_main %}
    function observeSection(targetSection, mainSection) {
        const options = {
            root: null,
            threshold: 0,
        };
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (!entry.isIntersecting && entry.boundingClientRect.top < 0) {
                    targetSection.classList.add('active');
                } else {
                    targetSection.classList.remove('active');
                }
            });
        });
        observer.observe(mainSection);
    }
    observeSection(mmAtcWrapper,mainRefSection);
    {% endif %}

    {% if section.settings.atc_scroll_to_main %}
        atcActionButton.addEventListener('click', (e) => {
            e.preventDefault();
            mainRefSection.scrollIntoView({ behavior: "smooth" });
        })
    {% endif %}
    backToTopBtn.addEventListener('click', () => {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });
</script>
{% schema %}
{
  "name": "Sticky Add to Cart 1-0",
  "settings": [
    {
      "type": "checkbox",
      "label": "ATC turn to Checkout",
      "id": "atc_to_checkout",
      "default": false
    },
    {
      "type": "checkbox",
      "label": "ATC Scroll to Main Section",
      "id": "atc_scroll_to_main",
      "default": false
    },
    {
      "type": "text",
      "label": "Main Section Selector",
      "id": "main_section_id"
    },
    {
      "type": "checkbox",
      "label": "ATC Appear after Main Section",
      "id": "atc_after_main",
      "default": false
    },
    {
      "type": "text",
      "label": "ATC Button Text",
      "id": "button-atc-text",
      "default": "Add to Cart"
    },
    {
      "type": "checkbox",
      "label": "Break Title",
      "id": "break_title",
      "default": true
    },
    {
      "type": "checkbox",
      "label": "Show Quantity",
      "id": "show_quantity",
      "default": true
    },
    {
      "type": "checkbox",
      "label": "Show Variants",
      "id": "show_variants",
      "default": true
    },
    {
      "type": "header",
      "content": "Style Settings"
    },
    {
      "type": "color",
      "label": "Background Color",
      "id": "bg_color"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color"
    },
    {
      "type": "color",
      "id": "btn_bg_color",
      "label": "Button Background Color"
    },
    {
      "type": "color",
      "id": "btn_text_color",
      "label": "Button Text Color"
    },
    {
      "type": "color",
      "label": "Button Border Color",
      "id": "button-border-color",
      "default": "#000"
    },
    {
      "type": "color",
      "label": "Button Hover Background Color",
      "id": "btn_hover_bg_color"
    },
    {
      "type": "color",
      "label": "Button Hover Text Color",
      "id": "btn_hover_text_color"
    },
    {
      "type": "color",
      "label": "Product Image Outline Color",
      "id": "product_img_outline_color"
    },
    {
      "type": "range",
      "label": "Button Border Radius",
      "id": "btn_border_radius",
      "min": 0,
      "max": 50,
      "step": 1,
      "default": 0
    },
    {
      "type": "range",
      "label": "Product Image Radius",
      "id": "product_img_radius",
      "min": 0,
      "max": 50,
      "step": 1,
      "default": 0
    }
  ],
  "presets": [
    {
      "name": "Sticky Add to Cart 1-0"
    }
  ]
}
{% endschema %}
